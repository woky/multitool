# vim:ft=bash:
set -eu -o pipefail -o errtrace

print_error_info()
{
	local frame=0
	echo "FAILURE at"
	while caller $frame; do ((++frame)); done | column -t -R1 | sed 's/^/  /'
}
trap print_error_info ERR

multitool()
{
	/proj/multitool.sh "$@"
}

show_tree()
{
	find $1 -printf '%#m %U %G %p\n' | sort -k4
}

show_test_tree()
{
	show_tree /files
}

recreate_test_tree()
(
	rm -rf /files
	umask 022
	mkdir /files
	mkdir /files/A
	touch /files/A/x
	touch /files/A/y
	ln -s ../B/B /files/A/B
	#ln -s ../B/nonexistent /files/A/dangling # TODO
	mkdir /files/B
	touch /files/B/x
	touch /files/B/y
	ln -s ../A/x /files/B/ax
	ln -s ../A /files/B/A
	mkdir /files/B/B
	touch /files/B/B/x
	touch /files/B/B/y
	ln -s ../../A /files/B/B/A
)

run_command()
{
	local label=$1 cmd=$2 status=0
	$cmd >/tmp/$label.stdout 2>/tmp/$label.stderr || status=1
	echo $cmd >/tmp/$label.cmd
	echo $status >/tmp/$label.status
	printf -v ${label}_status $status
}

run_command_with_tree()
{
	recreate_test_tree
	run_command "$@"
	show_test_tree >/tmp/$1.tree
}

report_command()
{
	local label=$1
	echo "Command $label:"
	echo "  Command: $(cat /tmp/$label.cmd)"
	echo "  Status: $(cat /tmp/$label.status)"
	echo "  Stdout:"
	echo "-----BEGIN-----"
	cat /tmp/$label.stdout
	echo "------END------"
	echo "  Stderr:"
	echo "-----BEGIN-----"
	cat /tmp/$label.stderr
	echo "------END------"
}

check_commands_success_same_tree()
{
	run_command_with_tree A "$1"
	run_command_with_tree B "$2"
	if (( A_status + B_status )); then
		report_command A
		report_command B
		echo "Command(s) failed!"
		return 1
	fi
	if ! cmp -s /tmp/{A,B}.tree; then
		report_command A
		report_command B
		echo "Trees do not match!"
		diff -U-1 -u /tmp/{A,B}.tree
		return 1
	fi
}

check_commands_failure()
{
	run_command_with_tree A "$1"
	run_command_with_tree B "$2"
	if (( A_status + B_status != 2 )); then
		report_command A
		report_command B
		echo "Command(s) should fail but succeeded!"
		return 1
	fi
}
